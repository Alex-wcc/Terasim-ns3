

#ifndef T_SPECTRUM_PROPAGATION_LOSS_MODEL_H
#define T_SPECTRUM_PROPAGATION_LOSS_MODEL_H


#include <ns3/object.h>
#include <ns3/mobility-model.h>
#include <ns3/spectrum-value.h>

namespace ns3 {




class TSpectrumPropagationLossModel : public Object
{
public:
  TSpectrumPropagationLossModel ();
  virtual ~TSpectrumPropagationLossModel ();

  static TypeId GetTypeId ();
  void SetNext (Ptr<TSpectrumPropagationLossModel> next);

  Ptr<SpectrumValue> CalcRxPowerSpectralDensity (Ptr<const SpectrumValue> txPsd,
                                                 Ptr<const MobilityModel> a,
                                                 Ptr<const MobilityModel> b) const;


  double CalcRxPower (double txPowerDbm,
                      Ptr<MobilityModel> a,
                      Ptr<MobilityModel> b) const;
  double CalcRxPowerPulse (Ptr<SpectrumValue> txPsd,
                      Ptr<MobilityModel> a,
                      Ptr<MobilityModel> b) const;


protected:
  virtual void DoDispose ();


private:
  virtual Ptr<SpectrumValue> DoCalcRxPowerSpectralDensity (Ptr<const SpectrumValue> txPsd,
                                                           Ptr<const MobilityModel> a,
                                                           Ptr<const MobilityModel> b) const = 0;


  virtual double DoCalcRxPower (double txPowerDbm,
                                Ptr<MobilityModel> a,
                                Ptr<MobilityModel> b) const = 0;

virtual double DoCalcRxPowerPulse (Ptr<SpectrumValue> txPsd,
                                Ptr<MobilityModel> a,
                                Ptr<MobilityModel> b) const = 0;




  Ptr<TSpectrumPropagationLossModel> m_next;
};






} // namespace ns3

#endif /* T_SPECTRUM_PROPAGATION_LOSS_MODEL_H */
