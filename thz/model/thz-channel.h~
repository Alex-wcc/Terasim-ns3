
#ifndef THZ_CHANNEL_H
#define THZ_CHANNEL_H

#include "ns3/channel.h"
#include "ns3/packet.h"
#include "ns3/simulator.h"
#include "thz-spectrum-signal-parameters.h"
#include "ns3/thz-spectrum-propagation-loss.h"
#include "ns3/propagation-delay-model.h"
#include "thz-net-device.h"
#include "thz-phy.h"
#include "thz-dir-antenna.h"
#include "ns3/mac48-address.h"
#include <list>
#include <vector>

namespace ns3 {

class THzSpectrumPropagationLoss;
class PropagationDelayModel;

class THzChannel : public Channel
{

typedef struct
{
  Ptr<Packet> packet;
  Ptr<THzPhy> phy;
  Time txDuration;
  Time txEnd;
  double_t rxPower;
} NoiseEntry;

public:
  THzChannel ();
  virtual ~THzChannel ();
  static TypeId GetTypeId ();
  
  virtual uint32_t GetNDevices () const;
  virtual Ptr<NetDevice> GetDevice (uint32_t i) const;
  void AddDevice (Ptr<THzNetDevice> dev, Ptr<THzPhy> phy);
  void Clear ();
  
  bool SendPacket (Ptr<THzSpectrumSignalParameters> params);
  //double GetNoiseW (Ptr<THzPhy> phy, Ptr<Packet> signal);

  double GetNoiseW (double interference);
  double DbmToW (double dbm);

private:
  
  void SendPacketDone (Ptr<THzPhy> phy, Ptr<Packet> packet);
  void ReceivePacket (uint32_t i, NoiseEntry ne);
  void ReceivePacketDone (uint32_t i, NoiseEntry ne);
  void DeleteNoiseEntry (NoiseEntry ne);
  Time m_delNoiseEntryLater;
  double m_noiseFloor;
  
  double m_XnodeMode;
  double m_YnodeMode;
  Ptr<THzSpectrumPropagationLoss> m_loss;
  Ptr<ConstantSpeedPropagationDelayModel> m_delay;
  Ptr<THzDirectionalAntenna> m_thzDA;
  Ptr<THzNetDevice> m_sendDev;
  Address m_send_check;  
  Mac48Address m_send_48_check;  
  Address m_add_check;  
  Mac48Address m_add_48_check;
  Mac48Address m_add_48_recv;
  Ptr<THzDirectionalAntenna> m_dirantenna;

  std::list<Ptr<MobilityModel> > m_recMobList;
  typedef std::vector<std::pair<Ptr<THzNetDevice>, Ptr<THzPhy> > > THzDeviceList;
  THzDeviceList m_devList;
  std::list<NoiseEntry> m_noiseEntry;
  
protected:
  
};

}

#endif // THZ_CHANNEL_H
