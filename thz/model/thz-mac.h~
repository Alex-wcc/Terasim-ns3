/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */


#ifndef THZ_MAC_H
#define THZ_MAC_H

#include "ns3/address.h"
#include "ns3/object.h"
#include "ns3/packet.h"
#include "ns3/ipv4-l3-protocol.h"
#include "ns3/nstime.h"
#include "ns3/ptr.h"
#include "thz-net-device.h"
#include "thz-phy.h"
#include "thz-channel.h"

namespace ns3 {

class THzPhy;
class THzChannel;
class THzNetDevice;

class THzMac : public Object
{
public:
  //virtual void ScheduleAckTimeout (Ptr<Packet> packet, Time ackTimeout)=0;
  virtual void AttachPhy (Ptr<THzPhy> phy) = 0;
  virtual void SetDevice (Ptr<THzNetDevice> dev) = 0;
  virtual void SetAddress (Mac48Address addr) = 0;
  //virtual void SetCwMin (uint32_t cw) = 0;
  virtual Mac48Address GetAddress (void) const = 0;
  virtual Mac48Address GetBroadcast (void) const = 0;
  virtual uint32_t GetBasicRate () = 0;
  virtual uint32_t GetDataRate () = 0;
  
  virtual bool Enqueue (Ptr<Packet> pkt, Mac48Address dest) = 0;
  
  virtual void SendPacketDone (Ptr<Packet> packet) = 0;
  virtual void ReceivePacket (Ptr<THzPhy> phy, Ptr<Packet> packet) = 0;
  virtual void ReceivePacketDone (Ptr<THzPhy> phy, Ptr<Packet> packet, bool collision) = 0;
  virtual void SetForwardUpCb (Callback<void, Ptr<Packet>, Mac48Address, Mac48Address> cb) = 0;
  
  virtual void Clear (void) = 0;

};

}

#endif // THZ_MAC_H
