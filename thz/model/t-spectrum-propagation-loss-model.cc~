

#include "t-spectrum-propagation-loss-model.h"
#include <ns3/log.h>
#include <ns3/mobility-model.h>

NS_LOG_COMPONENT_DEFINE ("TSpectrumPropagationLossModel");

namespace ns3 {

NS_OBJECT_ENSURE_REGISTERED (TSpectrumPropagationLossModel);

TSpectrumPropagationLossModel::TSpectrumPropagationLossModel ()
  : m_next (0)
{
}

TSpectrumPropagationLossModel::~TSpectrumPropagationLossModel ()
{
}

void
TSpectrumPropagationLossModel::DoDispose ()
{
  m_next = 0;
}

TypeId
TSpectrumPropagationLossModel::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::TSpectrumPropagationLossModel")
    .SetParent<Object> ()
  ;
  return tid;
}


void 
TSpectrumPropagationLossModel::SetNext (Ptr<TSpectrumPropagationLossModel> next)
{
  m_next = next;
}


Ptr<SpectrumValue>
TSpectrumPropagationLossModel::CalcRxPowerSpectralDensity (Ptr<const SpectrumValue> txPsd,
                                                          Ptr<const MobilityModel> a,
                                                          Ptr<const MobilityModel> b) const
{
  Ptr<SpectrumValue> rxPsd = DoCalcRxPowerSpectralDensity (txPsd, a, b);
  if (m_next != 0)
    {
      rxPsd = m_next->DoCalcRxPowerSpectralDensity (txPsd, a, b);
    }
  return rxPsd;
}

double
TSpectrumPropagationLossModel::CalcRxPower (double txPowerDbm,
                                   Ptr<MobilityModel> a,
                                   Ptr<MobilityModel> b) const
{
  double self = DoCalcRxPower (txPowerDbm, a, b);
  if (m_next != 0)
    {
      self = m_next->CalcRxPower (self, a, b);
    }
  return self;
}

double
TSpectrumPropagationLossModel::CalcRxPowerPulse (Ptr<SpectrumValue> txPsd,
                                   Ptr<MobilityModel> a,
                                   Ptr<MobilityModel> b) const
{
  NS_LOG_FUNCTION ("");
  /*double self = DoCalcRxPowerPulse (txPsd, a, b);
  if (m_next != 0)
    {
      self = m_next->CalcRxPowerPulse (self, a, b);
    }*/
  return self;
}


} // namespace ns3
