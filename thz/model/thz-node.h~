
#ifndef THZ_NODE_H
#define THZ_NODE_H

#include <vector>

#include "ns3/object.h"
#include "ns3/callback.h"
#include "ns3/ptr.h"
#include "ns3/thz-net-device.h"

namespace ns3 {

class THzApplication;
class Packet;
class Address;

class THzNode : public Object
{
public:
  static TypeId GetTypeId (void);

  THzNode();
  THzNode(uint32_t systemId);

  virtual ~THzNode();


  uint32_t GetId (void) const;


  uint32_t GetSystemId (void) const;

  uint32_t AddTHzDevice (Ptr<THzNetDevice> THzdevice);
  
  Ptr<THzNetDevice> GetTHzDevice (uint32_t index) const;
 
  uint32_t GetNTHzDevices (void) const;

  uint32_t AddTHzApplication (Ptr<THzApplication> THzapplication);
  
  Ptr<THzApplication> GetTHzApplication (uint32_t index) const;

  uint32_t GetNTHzApplications (void) const;
  typedef Callback<void,Ptr<THzNetDevice>, Ptr<const Packet>,uint16_t,const Address &,
                   const Address &, THzNetDevice::PacketType> ProtocolHandler;
 
  void RegisterProtocolHandler (ProtocolHandler handler, 
                                uint16_t protocolType,
                                Ptr<THzNetDevice> THzdevice,
                                bool promiscuous=false);
 
  void UnregisterProtocolHandler (ProtocolHandler handler);

  
  typedef Callback<void,Ptr<THzNetDevice> > THzDeviceAdditionListener;
  
  void RegisterTHzDeviceAdditionListener (THzDeviceAdditionListener listener);
  
  void UnregisterTHzDeviceAdditionListener (THzDeviceAdditionListener listener);

  static bool ChecksumEnabled (void);


protected:
 
  virtual void DoDispose (void);
  virtual void DoInitialize (void);
private:
  void NotifyTHzDeviceAdded (Ptr<THzNetDevice> THzdevice);
  bool NonPromiscReceiveFromTHzDevice (Ptr<THzNetDevice> THzdevice, Ptr<const Packet>, uint16_t protocol, const Address &from);
  bool PromiscReceiveFromTHzDevice (Ptr<THzNetDevice> THzdevice, Ptr<const Packet>, uint16_t protocol,
                                 const Address &from, const Address &to, THzNetDevice::PacketType packetType);
  bool ReceiveFromTHzDevice (Ptr<THzNetDevice> THzdevice, Ptr<const Packet>, uint16_t protocol,
                          const Address &from, const Address &to, THzNetDevice::PacketType packetType, bool promisc);

  void Construct (void);

  struct ProtocolHandlerEntry {
    ProtocolHandler handler;
    Ptr<THzNetDevice> THzdevice;
    uint16_t protocol;
    bool promiscuous;
  };
  typedef std::vector<struct THzNode::ProtocolHandlerEntry> ProtocolHandlerList;
  typedef std::vector<THzDeviceAdditionListener> DeviceAdditionListenerList;

  uint32_t    m_id;         // Node id for this node
  uint32_t    m_sid;        // System id for this node
  std::vector<Ptr<THzNetDevice> > m_THzdevices;
  std::vector<Ptr<THzApplication> > m_THzapplications;
  ProtocolHandlerList m_handlers;
  THzDeviceAdditionListenerList m_THzdeviceAdditionListeners;
};

} // namespace ns3

#endif /* THZ_NODE_H */
