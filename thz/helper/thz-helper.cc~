
#include "ns3/mobility-model.h"
#include "ns3/log.h"
#include "ns3/config.h"
#include "ns3/simulator.h"
#include "ns3/mac48-address.h"
#include "thz-helper.h"
#include "ns3/thz-mac.h"
#include "ns3/thz-phy.h"
#include "ns3/thz-channel.h"
#include "ns3/thz-dir-antenna.h"

#include <sstream>
#include <string>

NS_LOG_COMPONENT_DEFINE("THzHelper");

namespace ns3
{
  
THzMacHelper::~THzMacHelper ()
{}

THzPhyHelper::~THzPhyHelper ()
{}

THzDirAntennaHelper::~THzDirAntennaHelper ()
{}

THzHelper::THzHelper ()
{//built flag to enable selection
  m_mac.SetTypeId ("ns3::THzMacCsma");
  m_phy.SetTypeId ("ns3::THzPhyNano");
  m_dirantenna.SetTypeId ("ns3::THzDirectionalAntenna");
}

THzHelper::~THzHelper ()
{}

NetDeviceContainer
THzHelper::Install (NodeContainer c, Ptr<THzChannel> channel, const THzPhyHelper &phyHelper, const THzMacHelper &macHelper, const THzDirAntennaHelper &dirantennaHelper) const
{
  NetDeviceContainer devices;
  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); i++)
    {
      Ptr<Node> node = *i;
      Ptr<THzNetDevice> device = CreateObject<THzNetDevice> ();

      Ptr<THzMac> mac = macHelper.Create ();
      Ptr<THzPhy> phy = phyHelper.Create ();
      Ptr<THzDirectionalAntenna> dirantenna = dirantennaHelper.Create ();
      mac->SetAddress (Mac48Address::Allocate ());
      device->SetMac (mac);
      device->SetPhy (phy);     
      device->SetChannel (channel);
      device->SetDirAntenna (dirantenna);

      node->AddDevice (device);
      devices.Add (device);

      NS_LOG_DEBUG ("node="<<node<<", mob="<<node->GetObject<MobilityModel> ());
  }
  return devices;
}

} //end namespace ns3
