
#include "thz-phy-basic-helper.h"
#include "ns3/thz-phy-nano.h"

#include <sstream>
#include <string>

namespace ns3 {

THzPhyBasicHelper::THzPhyBasicHelper ()
{}

THzPhyBasicHelper::~THzPhyBasicHelper ()
{}

THzPhyBasicHelper
THzPhyBasicHelper::Default (void)
{
  THzPhyBasicHelper helper;
  helper.SetType ("ns3::THzPhyNano");
  return helper;
}

void
THzPhyBasicHelper::SetType (std::string type,
                            std::string n0, const AttributeValue &v0,
                            std::string n1, const AttributeValue &v1,
                            std::string n2, const AttributeValue &v2,
                            std::string n3, const AttributeValue &v3,
                            std::string n4, const AttributeValue &v4,
                            std::string n5, const AttributeValue &v5,
                            std::string n6, const AttributeValue &v6,
                            std::string n7, const AttributeValue &v7)
{
  m_phy.SetTypeId (type);
  m_phy.Set (n0, v0);
  m_phy.Set (n1, v1);
  m_phy.Set (n2, v2);
  m_phy.Set (n3, v3);
  m_phy.Set (n4, v4);
  m_phy.Set (n5, v5);
  m_phy.Set (n6, v6);
  m_phy.Set (n7, v7);
}

void 
THzPhyBasicHelper::Set (std::string n, const AttributeValue &v)
{
  m_phy.Set (n, v);
}

Ptr<THzPhyNano>
THzPhyBasicHelper::Create (void) const
{
  Ptr<THzPhyNano> phy = m_phy.Create<THzPhyNano> ();
  return phy;
}

} //namespace ns3
