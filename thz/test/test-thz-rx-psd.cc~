#include "ns3/log.h"
#include "ns3/test.h"
#include "ns3/double.h"
#include "ns3/thz-spectrum-propagation-loss.h"
#include "ns3/thz-spectrum-signal-parameters.h"
#include "ns3/constant-position-mobility-model.h"
#include "ns3/thz-spectrum-waveform.h"
#include <ns3/spectrum-value.h>
#include "ns3/gnuplot.h"



using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("THzRxPsd");

double
DbmToW (double dbm)
{
  double mw = pow (10.0,dbm / 10.0);
  return mw / 1000.0;
}

Gnuplot2dDataset
DoRun (Ptr<THzSpectrumPropagationLoss> lossModel, std::string dataTitle)
{

    Gnuplot2dDataset dataset;
    dataset.SetTitle (dataTitle);
    dataset.SetStyle (Gnuplot2dDataset::LINES_POINTS);
    
    double txPowerDbm = -20;//dBm
    
    double pulseDuration = 100e-15;//100 femtoseconds
    double distance = 1;//m
    Ptr<SpectrumValue> txPsd;
    Ptr<SpectrumValue> rxPsd;

    double txPowerW = DbmToW(txPowerDbm);
    Ptr<THzSpectrumValueFactory> sf = CreateObject<THzSpectrumValueFactory> ();
    
    Ptr<SpectrumModel> InitTHzPulseSpectrumWaveform;
    
    InitTHzPulseSpectrumWaveform = sf->THzPulseSpectrumWaveformInitializer();
    txPsd = sf->CreatePulsePowerSpectralDensity (1, pulseDuration, txPowerW);
  
    Ptr<MobilityModel> a = CreateObject<ConstantPositionMobilityModel> ();
    a->SetPosition (Vector (0,0,0));
    Ptr<MobilityModel> b = CreateObject<ConstantPositionMobilityModel> ();
    b->SetPosition (Vector (distance, 0, 0));
    rxPsd = lossModel->CalcRxPowerSpectralDensity (txPsd, a, b);

    Values::iterator vit = rxPsd->ValuesBegin ();
    Bands::const_iterator fit = rxPsd->ConstBandsBegin ();
    //std::printf("f is %f \n",fit->fc);
    while (vit != rxPsd->ValuesEnd ())
      {
	NS_ASSERT (fit != rxPsd->ConstBandsEnd ());
	dataset.Add(fit->fc, *vit);      
	
	++vit;
	++fit; 
      }
    
    return dataset;
    
}


int main (int argc, char *argv[])
{
    LogComponentEnable("THzSpectrumPropagationLoss", LOG_LEVEL_ALL);
    std::string fileNameWithNoExtension = "thz-received-power-spectral-density-nano";
    std::string graphicsFileName        = fileNameWithNoExtension + ".png";
    std::string plotFileName            = fileNameWithNoExtension + ".plt";
    std::string plotTitle               = "THz received signal power spectral density for nanoscale communication";
        
    Gnuplot plot(graphicsFileName);
    plot.SetTitle(plotTitle);
    plot.SetLegend ("Frequency [Hz]", "PSD [Watts/Hz]");
    
    Ptr<THzSpectrumPropagationLoss> lossModel = CreateObject<THzSpectrumPropagationLoss> ();
    
    Gnuplot2dDataset dataset1 = DoRun(lossModel, "THz received signal PSD");

    plot.AddDataset(dataset1);

    std::ofstream plotFile (plotFileName.c_str());
    
    plot.GenerateOutput (plotFile);
    plotFile.close ();
    return 0;
}


